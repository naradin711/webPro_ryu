 220324 
 인터페이스의 장점
 1. 개발시간의 단축 - 인터페이스를 구현하는 클래스가 작성될 때까지 기다리지 않고 
                           양쪽에서 동시에 개발을 진행할 수 있다.
 2.  표준화의 가능 -  프로젝트에 사용되는 기본 틀을 인터페이스로 작성한 다음, 
                           개발자들에게 인터페이스를 구현하여 프로그램을 작성하도록 함으로써 
                           보다 일관되고 정형화된 프로그램의 개발이 가능하다
 3. 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다      
                        - 서로 아무런 관계도 없는 클래스들에게 하나의 인터페이스를 
                          공통적으로 구현하도록 함으로써 관계를 맺어 줄 수 있다.
 4. 독립적인 프로그래밍 -  클래스와 클래스간의 직접적인 관계를 인터페이스를 이용해서 간접적인 관계로 변경하면, 
                          한 클래스의 변경이 관련된 다른 클래스에 영향을 미치지 않는 독립적인 프로그래밍이 가능하다.

싱글턴 패턴(Singleton pattern)
                                어떤 클래스의 객체는 오직 하나인 유일한 객체를 만들어 여러가지 상황에서 
                                동일한 객체에 접근하기 위해 만들어진 패턴

스트레티지 패턴(Strategy Pattern)
                                기능 하나를 정의하고 각각을 캡슐화하여 교환해서 사용할 수 있도록 만든다.
                                기능을 부품화, 표준화하는 것.
