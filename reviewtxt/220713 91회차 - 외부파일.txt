 200713 외부파일 SPRING

Environment 객체를 이용한 스프링 빈 설정
(1)	Context 객체를 얻는다.
ConfigurableApplicationContext ctx = new GenericXmlApplicationContext();
(2)	Context 객체로부터 ctx.getEnvironment()를 하여 Environment 객체를 얻는다. 
ConfigurableEnvironment env = ctx.getEnvironment();
(3)	Environment객체안에는 여러 가지 정보들(환경설정을 위한)이 있다. 
이런 값들을 관리하기 위해 이런 정보들이 바로 들어있지 않고, 
PropertySource라고 하는 객체가 있고, PropertySource안에 정보가 있다.  
Environment 객체로부터 env.getPropertySources()를 하여 데이터를 관리해 주는 PropertySources 객체를 얻는다.
MutablePropertySources propertySources = env.getPropertySources();
(4)	추가 : propertySources.addLast()
propertySources.addLast(new ResourcePropertySource("classpath:admin.properties")); 
(5)	추출 : env.getProperty() 내가 필요한 정보가 있을 때까지 계속 검색하고 있으면 정보값을 리턴.
System.out.println(env.getProperty("admin.id"));


위와 같은 법칙에 따라서 프로필을 사용하여 입력된 프로필에 따라서 출력값이 달라지는 구성을 만든다.

먼저 해당 과정에서 얻을 값의 이름을 설정한다.

@Data
public class EnvInfo {
	private String ipNum;
	private String portNum;
	private String userId;
	private String pw;
}

ipNum=127.0.0.1
portNum=8181
userId=scott
pw=tiger

ipNum=192.16.2.1
portNum=90
userId=sykim
pw=a1234

properties 파일을 통해 입력할 개체값을 지정하고 xml 파일을 통해 web으로 다시 출력할 준비를 한다.

<context:property-placeholder location="classpath:META-INF/ex04/dev.properties"/>
	<bean id="envInfo" class="com.lec.ch04.ex04.EnvInfo">
		<property name="ipNum" value="${ipNum}"/>
		<property name="portNum" value="${portNum}"/>
		<property name="userId" value="${userId}"/>
		<property name="pw" value="${pw}"/> 
	</bean>

<context:property-placeholder location="classpath:META-INF/ex04/run.properties"/>
	<bean id="envInfo" class="com.lec.ch04.ex04.EnvInfo">
		<property name="ipNum" value="${ipNum}"/>
		<property name="portNum" value="${portNum}"/>
		<property name="userId" value="${userId}"/>
		<property name="pw" value="${pw}"/> 
	</bean>

이제 위 xml을 토대로 출력할 메인페이지를 구성하고 이를 통해 출력된 값은 아래와 같다.

public class Main {
	public static void main(String[] args) {
		String config = null;
		Scanner sc = new Scanner(System.in);
		System.out.print("dev? run? = ");
		String answer = sc.next();
		if(answer.equalsIgnoreCase("dev")) {
			config = "dev";
		} else if (answer.equalsIgnoreCase("run")) {
			config = "run";
		} else {
			System.out.println("제대로 된 환경이 입력되지 않았습니다.");
			System.exit(0); // 끝냄
		}
		sc.close();
		GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();
		ctx.getEnvironment().setActiveProfiles(config);
		ctx.load("classpath:META-INF/ex04/dev.xml", "classpath:META-INF/ex04/run.xml");
		ctx.refresh();
		EnvInfo info = ctx.getBean("envInfo", EnvInfo.class);
		System.out.println("ipNum = " + info.getIpNum());
		System.out.println("portNum = " + info.getPortNum());
		System.out.println("userId = " + info.getUserId());
		System.out.println("pw = " + info.getPw());
		ctx.close();
	}
	
}



dev? run? = run
ipNum = 192.16.2.1
portNum = 90
userId = sykim
pw = a1234 

dev? run? = dev
ipNum = 127.0.0.1
portNum = 8181
userId = scott
pw = tiger
