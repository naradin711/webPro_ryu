 200719 JDBC template

 먼저 외부 파일을 만들 properties 파일을 아래와 같이 생성한다.

	db.driverClassName=oracle.jdbc.driver.OracleDriver
	db.url=jdbc:oracle:thin:@localhost:1521:xe
	db.username=scott
	db.password=tiger  

해당 하는 템플릿을 개인 설정에 적용시키기 위해 root-context.xml에 아래와 같은 설정을 구성한다.
	<bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		 <property name="driverClassName" value="${db.driverClassName}"></property>
		 <property name="url" value="${db.url}"></property>
		 <property name="username" value="${db.username}"></property>
		 <property name="password" value="${db.password}"></property>
	</bean>	
	<bean name="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>

해당 템플레이트를 어디서든 사용하기 위해서 외부의 클래스로 따로 빼서 public 함수로 아래와 같이 지정한다.

public class Constant {
	public static JdbcTemplate template;

}
			 
이렇게 정해진 Template를 controller에 지정하기 위해 아래와 같은 구성을 삽입한다.

	private JdbcTemplate template;
	@Autowired
	public void setTemplate(JdbcTemplate template) {
		this.template = template;
		Constant.template = this.template;
		// 해당 프로젝트 전체에서 template를 사용하도록 세팅한다.
	}


지정된 템플레이트를 DAO 파일에 아래와 같이 수정하여 나타낸다.

public class BoardDao {
	public static final int FAIL = 0;
	public static final int SUCCESS = 1;
	public JdbcTemplate template;
	private static BoardDao instance = new BoardDao();
	public static BoardDao getInstance() {
		return instance;
	}
	private BoardDao() {
			template = Constant.template;
	} 
	// 글목록
	public ArrayList<BoardDto> boardList(){
		String sql ="SELECT * FROM MVC_BOARD ORDER BY BGROUP DESC, BSTEP";
		ArrayList<BoardDto> dtos = (ArrayList<BoardDto>)template.query(sql, new BeanPropertyRowMapper<BoardDto>(BoardDto.class));
		return dtos;
	}
	public ArrayList<BoardDto> boardList(final int startRow, final int endRow){
		String sql = "SELECT * FROM (SELECT ROWNUM RN, A.* " + 
				"           FROM (SELECT * FROM MVC_BOARD ORDER BY BGROUP DESC, BSTEP) A)" + 
				"    WHERE RN BETWEEN ? AND ?";
		return (ArrayList<BoardDto>)template.query(sql, new PreparedStatementSetter() {
		 
			@Override
			public void setValues(PreparedStatement pstmt) throws SQLException {
				pstmt.setInt(1, startRow);
				pstmt.setInt(2, endRow);
			}
		} , 
				
				new BeanPropertyRowMapper<BoardDto>(BoardDto.class)); 
		
	}
	// 글 갯수 
	public int getBoardTotCnt() { 
		String sql = "SELECT COUNT(*) FROM MVC_BOARD";
		return template.queryForObject(sql, Integer.class);
		 
	}
	//원글쓰기
	public int write(final BoardDto bDto) { 
		String sql = "INSERT INTO MVC_BOARD "
				+ "(bID, bNAME, bTITLE, bCONTENT, bGROUP, bSTEP, bINDENT, bIP)" + 
				"    VALUES (MVC_BOARD_SEQ.NEXTVAL, ?, ?, ?, " + 
				"            MVC_BOARD_SEQ.CURRVAL, 0,0, ?)";
		return template.update(sql, new PreparedStatementSetter() {
			
			@Override
			public void setValues(PreparedStatement pstmt) throws SQLException {
				pstmt.setString(1, bDto.getBname());
				pstmt.setString(2, bDto.getBtitle());
				pstmt.setString(3, bDto.getBcontent());
				pstmt.setString(4, bDto.getBip()); 
			}
		}); 
	}
	
	
	// hit수 올리기
	private void hitUp(int bid) { 
		String sql = "UPDATE MVC_BOARD SET BHIT = BHIT+1 WHERE BID="+bid;
		template.update(sql); 
	}
	
	
	// 글 상세보기(글 상세볼 때 조회수도 올림)
	public BoardDto contentView(int bid) {
		hitUp(bid); 
		String sql = "SELECT * FROM MVC_BOARD WHERE BID="+bid;
		return template.queryForObject(sql, new BeanPropertyRowMapper<BoardDto>(BoardDto.class));
		 
	}
	// bid로 dto 가져오기 (답글쓰기 + 수정)
	public BoardDto modifyView_replyView(int bid) { 
		String sql = "SELECT * FROM MVC_BOARD WHERE BID="+bid;
		return template.queryForObject(sql, new BeanPropertyRowMapper<BoardDto>(BoardDto.class));
	}
	// 글 수정하기
	public int modify(final BoardDto bDto) { 
		String sql = "UPDATE MVC_BOARD SET BNAME=?, " + 
				"                    BTITLE = ?, " + 
				"                    BCONTENT = ?, " + 
				"                    BIP = ?" + 
				"        WHERE BID=?";
		return template.update(sql, new PreparedStatementSetter() {

			@Override
			public void setValues(PreparedStatement pstmt) throws SQLException {
				pstmt.setString(1, bDto.getBname());
				pstmt.setString(2, bDto.getBtitle());
				pstmt.setString(3, bDto.getBcontent());
				pstmt.setString(4, bDto.getBip());
				pstmt.setInt(5, bDto.getBid());
				
			}
			
			
		});
		 
	}
	// 글 삭제
	public int delete(int bid) { 
		String sql = "DELETE FROM MVC_BOARD WHERE BID="+bid;
		return template.update(sql);
	}
	// 답변글 쓰기 전 작업 : stepA
	private void preReplyStepA(final int bgroup, final int bstep) { 
		String sql = "UPDATE MVC_BOARD SET BSTEP = BSTEP+1 WHERE BGROUP=? AND BSTEP>?";
		template.update(sql, new PreparedStatementSetter() {

			@Override
			public void setValues(PreparedStatement pstmt) throws SQLException {
				pstmt.setInt(1, bgroup);
				pstmt.setInt(2, bstep);
				
			}
			
			
		});
		 
	}
	// 답변글 쓰기
	public int reply(final BoardDto bDto) { // bname, btitle, bcontent, bip : 답변글에 대한 정보
		                             // bgroup, bstep, bindent : 원글에 대한 정보
		preReplyStepA(bDto.getBgroup(), bDto.getBstep()); 
		String sql = "INSERT INTO MVC_BOARD" + 
				" (BID, BNAME, BTITLE, BCONTENT, BGROUP, BSTEP, BINDENT, BIP) " + 
				"    VALUES (MVC_BOARD_SEQ.NEXTVAL, ?, ?, ?, ?, ?, ?, ?)";
		return template.update(sql, new PreparedStatementSetter() {

			@Override
			public void setValues(PreparedStatement pstmt) throws SQLException { 
				pstmt.setString(1, bDto.getBname());
				pstmt.setString(2, bDto.getBtitle());
				pstmt.setString(3, bDto.getBcontent());
				pstmt.setInt(4, bDto.getBgroup());
				pstmt.setInt(5, bDto.getBstep()+1);
				pstmt.setInt(6, bDto.getBindent()+1);
				pstmt.setString(7, bDto.getBip());
				
			} 
		}); 
	}
}





