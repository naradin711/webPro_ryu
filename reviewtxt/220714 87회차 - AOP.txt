 200714 AOP
 
AOP방법은 핵심 기능과 공통 기능을 분리 시켜놓고, 공통 기능을 필요로 하는 핵심 기능들에서 사용하는 방식

핵심 단어

	Aspect : 공통 기능. 예를 들어 로깅같은 기능 자체에 대한 용어
	Advice : 공통기능을 구현한 객체 메
	Join Point : 핵심기능. 공통 기능을 적용할 수 있는 대상.
	PointCuts : Join Point의 부분으로 실제 Advice를 적용해야 되는 부분
	Proxy : Advice가 적용되었을 때 만들어지는 객체
	Weaving : Advice와 target이 결합되어서 프록시 객체를 만드는 과정(advice를 핵심기능에 적용하는 행위)

AOP를 이용하는 예시를 아래와 같이 실행해보자.

먼저 Student / Worker 페이지를 만들어서 호출할 핵심 기능을 미리 만든다.


@Data
public class Student {
		private String name;
		private int age;
		private int gradeNum;
		private int classNum;
		public void getStudentInfo() { // 호출될 핵심기능 (티켓 메소드 = 비즈니스 로직)
			System.out.println("이름 : " + name);
			System.out.println("나이 : " + age);
			System.out.println("학년 : " + gradeNum);
			System.out.println("반  : " + classNum);
		}

@Data
public class Worker {
		private String name;
		private int age;
		private String job; 
		public void getWorkerInfo() { // 호출될 핵심기능 (티켓 메소드 = 비즈니스 로직)
			System.out.println("이름 : " + name);
			System.out.println("나이 : " + age);
			System.out.println("직업 : " + job); 
		}

이후 Student와 Worker로 실행될 파일에 적용될 공통기능(AOP)을 설정하는 ProxyClass를 아래와 같이 만든다.

public class ProxyClass {
	// around Advice : 핵심기능 전후로 공통기능 수행
	public Object aroundAdvice(ProceedingJoinPoint joinPoint) throws Throwable{
		System.out.println("*****************************************************");
		String signatureName = joinPoint.getSignature().toString(); //핵심기능 메소드명
		System.out.println(signatureName + "가 시작되었습니다.");
		long startTime = System.currentTimeMillis(); //시작시점
		try {
			Object obj = joinPoint.proceed();
			return obj;
		} finally {
			long endTime = System.currentTimeMillis(); // 끝나는 시점
			System.out.println(signatureName + "가 수행되는 경과 시간 : " + (endTime + startTime));
			System.out.println("*****************************************************");
		}
	}
	
	// before Advice
	public void beforeAdvice () {
		System.out.println(" 핵심기능 수행하기 전에 알아서 beforeAdvice(공통기능)수행");
	}
	
	// after Advice
	public void afterAdvice () {
		System.out.println(" 핵심기능 수행하고 알아서 afterAdvice(공통기능)수행");
	}
	
	
	// after-returning Advice
	public void afterReturningAdvice () {
		System.out.println(" 정상적으로 핵심기능이 수행된 이후 이 afterReturningAdvice 수행");
	}
	
	// after-throwing Advice
	public void afterThrowingAdvice () {
		System.out.println(" 예외가 발생된 이후에 afterThrowingAdvice수행");
	}

}

이제 아래의 context 파일을 통해 AOP를 가져오고 Student와 Worker에 넣을 개체값을 지정한다.

	<bean id="proxyClass" class="com.lec.ch05.ex01.ProxyClass"/> <!-- 객체 생성 -->
	<aop:config>
		<aop:aspect id="aroundAspect" ref="proxyClass">
			<aop:pointcut expression="within(com.lec.ch05.ex01.*)" id="aroundM"/>
			<aop:around method="aroundAdvice" pointcut-ref="aroundM"/>
		</aop:aspect>
	</aop:config>
	<bean id="student" class="com.lec.ch05.ex01.Student">
		<property name="name" value="홍길동"/>
		<property name="age" value="17"/>
		<property name="gradeNum" value="1"/>
		<property name="classNum" value="3"/>
	
	</bean>
	<bean id="worker" class="com.lec.ch05.ex01.Worker">
		<property name="name" value="서길동"/>
		<property name="age" value="37"/>
		<property name="job" value="프로그래머"/>
	
	</bean>

위와 같이 정해진 AOP와 핵심메소드를 출력할 웹 페이지를 아래와 같이 구성한 후 출력값을 알아본다.

	public static void main(String[] args) {
		String location = "classpath:META-INF/applicationCTX001.xml";
		GenericXmlApplicationContext ctx = new GenericXmlApplicationContext(location);
		Student student = ctx.getBean("student", Student.class);
		Worker worker = ctx.getBean("worker", Worker.class);
		student.getStudentInfo(); //핵심기능
		worker.getWorkerInfo();
	} 

*****************************************************
void com.lec.ch05.ex01.Student.getStudentInfo()가 시작되었습니다.
이름 : 홍길동
나이 : 17
학년 : 1
반  : 3
void com.lec.ch05.ex01.Student.getStudentInfo()가 수행되는 경과 시간 : 3315579616572
*****************************************************
*****************************************************
void com.lec.ch05.ex01.Worker.getWorkerInfo()가 시작되었습니다.
이름 : 서길동
나이 : 37
직업 : 프로그래머
void com.lec.ch05.ex01.Worker.getWorkerInfo()가 수행되는 경과 시간 : 3315579616585
*****************************************************
	