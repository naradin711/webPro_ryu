 220607 

먼저 답글을 지정하기 이전에 해당 기능을 실행할 쿼리를 sql로 만들어본다.

UPDATE BOARD SET RE_STEP = RE_STEP+1 WHERE REF =150 AND RE_STEP>0;

먼저 RE_STEP값을 1증가 시키고 답글 달고자 하는 원글의 ref값을 불러온다.
이 작업을 실행하게 되면 원글과 동일한 ref값을 가지면서 step은 1이 추가되어
같은 ref값의 목록으로 묶이게 되어 입력한 시점과 상관없이 원글 아래에 놓이게 된다.

위 쿼리를 실행한 이후 답글을 작성할 쿼리를 아래와 같이 만든다.

INSERT INTO BOARD (NUM, WRITER, SUBJECT, CONTENT, EMAIL, PW, REF, RE_STEP, RE_INDENT, IP)
    VALUES (151, '답변자', '글150-1', '답글 본문', 'won@w.com', '1', 150, 1, 1, '192.177.54.11'); 

위 쿼리 2개를 한데 묶어서 지정하기 위해서는 2개의 dao method가 필요하다.

먼저 RE_STEP값을 올리고 REF값을 지정하는 쿼리를 이용한 dao method를 아래와 같이 만든다.

private void preReplyStepA(int ref, int reStep) {
	Connection conn = null;
	PreparedStatement pstmt = null;
	String sql = "UPDATE BOARD SET RE_STEP = RE_STEP+1 WHERE REF = ? AND RE_STEP > ? ";
	try {
		conn = getConnection();
		pstmt = conn.prepareStatement(sql);
		pstmt.setInt(1, ref);
		pstmt.setInt(2, reStep);
		int result = pstmt.executeUpdate();
		System.out.println(result+"개 조정");
	} catch (Exception e) {
		System.out.println(e.getMessage());
	} finally {
		try {
			if(pstmt!=null) pstmt.close();
			if(conn!=null) 	conn.close();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		} // try
	}//finally	
}

위 method를 통해 답글을 작성할 최종 method를 아래와 같이 작성한다.

public int reply(BoardDto dto) {
	int result = FAIL;
	Connection conn = null;
	PreparedStatement pstmt = null;
	// NUM, WRITER, SUBJECT, CONTENT, EMAIL, PW, REF, RE_STEP, RE_INDENT, IP
	// 사용자로부터 입력받을 내용 	: WRITER, SUBJECT, CONTENT, EMAIL, PW
	// 원글에 대한 정보 			: REF, RE_STEP, RE_INDENT
	// 시스템으로 부터 받을 정보 	: IP
	String sql = "INSERT INTO BOARD (NUM, WRITER, SUBJECT, CONTENT, EMAIL, PW, REF, RE_STEP, RE_INDENT, IP) " + 
		"    VALUES ((SELECT NVL(MAX(NUM), 0)+1 FROM BOARD), ? , ? , ? , ? , ? , ? , ? , ? , ? )";
	preReplyStepA(dto.getRef(), dto.getReStep()); // 답변글 저장 전 step A 실행 / 원글에서 받는 정보
	try {
		conn = getConnection();
		pstmt = conn.prepareStatement(sql);
		pstmt.setString(1, dto.getWriter());
		pstmt.setString(2, dto.getSubject());
		pstmt.setString(3, dto.getContent());
		pstmt.setString(4, dto.getEmail());
		pstmt.setString(5, dto.getPw());
		pstmt.setInt(6, dto.getRef());
		pstmt.setInt(7, dto.getReStep()+1); //원글의 스텝보다 더해야하니까 1을 더해야 함
		pstmt.setInt(8, dto.getReIndent()+1); //원글보다 들여써야하니까 1을 더해야 함
		pstmt.setString(9, dto.getIp());
		result = pstmt.executeUpdate();
		dto.setReStep(dto.getReStep()+1);     // 원글보다 증가한 스텝 값을 DB에 저장	
		dto.setReIndent(dto.getReIndent()+1); // 원글보다 증가한 들여쓰기 값을 DB에 저장
		System.out.println(result==SUCCESS? "답변글 성공" + dto :"답변글 실패" + dto );
	} catch (Exception e) {
		System.out.println(e.getMessage() + "답글오류");
	} finally {
		try {
			if(pstmt!=null) pstmt.close();
			if(conn!=null) 	conn.close();
		} catch (Exception e) {
			System.out.println(e.getMessage() + "답글오류1");
		} // try
	}//finally			
	return result;
      }
}

해당 dao를 글 목록에 저장하기 위해서는 아래와 같은 과정을 거쳐야 한다.

if (dto.getReIndent() > 0) {
	int width = dto.getReIndent() * 20;
	out.println("<img src= '"+ conPath +"/img/re.gif' width='"+width+"', height='10'>");
}

먼저 reIndent값이 0이 아닐 경우 해당 값에 20을 곱해 width값을 지정하여 들여쓰기 범위를 지정하고

	int result;
	if (dto.getNum() == 0) {//원글쓰기
		result = dao.insertBoard(dto);
	} else {
		result = dao.reply(dto);
	}

위 구성을 통해 글을 작성할 때 원글의 넘버값을 받아올 경우 dao.reply(dto) method를 실행하도록 한다.
해당 구성을 통해 글 목록 값을 작성할 경우 출력값은 아래와 같다.

글번호	작성자	글제목				메일			조회수
154	갓길동	원글				dda@ddddd.com		2
155	갓길동	  154 글에 대한 답변글		dda@ddddd.com		2
157	갓길동	    154 글에 대한 답변글 2		dda@ddddd.com		0
156	갓길동	    154 글에 대한 답변글에 대한 답변글	hong@honghong.com	0
150	원글자	글 150				won@w.com		1
152	답변자2	   글 150-2			won@w.com		2
153	답변자2	     글 150-2-1			null			0
151	답변자	   글150-1				won@w.com		0
149	원글자	글 150				won@w.com		0
148	원글자	글 150				won@w.com		0

이를 통해 답변글의 답변글이 기존의 답변글보다 더 들여쓰기를 하는 것을 알 수 있으며
150번 원글에 달린 답변글이 글 번호는 더 많아도 150번 글 밑에 위치하여 그룹이 지정되어 있음을 알 수 있다.

























