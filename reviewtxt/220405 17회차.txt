 220405 

(1)	Input : 파일 데이터를 읽는다. 키보드의 데이터를 읽는다. 네트워크상의 데이터를 읽는다(전송)
(2)	Output :파일에 데이터를 쓴다. 모니터에 데이터를 쓴다(출력). 네트워크상에 데이터를 쓴다(전송)

(1)	InputStream 사용법
①	InputStream(추상) 클래스를 상속받은 여러 가지 API 하위 클래스 중의 하나를 이용해서 객체를 만든다. 
              또는 다른 클래스의 메소드에서 반환(리턴)되는 타입 객체를 얻는다.
②	read(), read(byte[]) 두 개의 메소드를 이용하여 데이터를 읽는다.
i.	read() 1byte씩 읽는다. 속도가 느리다
ii.	read(byte[]) byte[]만큼씩 읽는다. 속도가 빠르다.
③	예외 처리와 무조건 close() 실행
i.	I/O를 하면서 반드시 해야 하는 예외처리가 있습니다.
             IOException입니다. 반드시 하도록 컴파일러가 강요합니다
ii.	I/O 작업 마지막은 close()로 외부 연결을 끝내야 합니다

(2)	OutputStream 사용법
①	OutputStream(추상) 클래스를 상속받은 여러가지 API 하위 클래스들 중의 하나를 이용해서 객체를 만든다.
             또는 다른 클래스의 메소드에서 반환(리턴)되는 타입 객체를 얻는다.
②	write()메소드를 이용해서 데이터를 읽으면 됩니다.
③	write(int), write(byte[]), write(byte[], int, int) 세개의 메소드를 이용할 수 있습니다.
④	예외 처리와 무조건 close() 실행
i.	I/O를 하면서 반드시 해야 하는 예외처리가 있습니다. IOException입니다. 
             반드시 하도록 컴파일러가 강요합니다
ii.	I/O 작업 마지막은 close()로 외부 연결을 끝내야 합니다
