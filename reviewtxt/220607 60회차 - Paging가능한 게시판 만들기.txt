 220607


Paging을 하기 위한 함수들의 예시

PAGESIZE		한 페이지당 글 수 :10개	
BLOCKSIZE	블록당 페이지수 : 10개	
		
currentPage	현재 몇 페이지인지(int)	
pageNum		현재 몇 페이지인지(String)	
		
startRow	시작번호	 (페이지번호 - 1) * 페이지당 갯수+ 1
endRow	끝번호 	 시작번호 + 페이지당갯수 - 1
pageCnt	페이지 	 Math.ceil((double)전체글갯수/페이지당 갯수)
	블록수	 Math.ceil(페이지전체갯수/블록당 페이지 갯수)
startPage	시작페이지 ((현재페이지 -1)/10)*10 +1
endPage	끝페이지	시작페이지 + 블록당페이지 수 -1

먼저 10개씩 끊어서 출력할 TOP-N구문 쿼리를 만든다.

SELECT * FROM BOARD ORDER BY REF DESC, RE_STEP; 
-- 1단계 -- 글번호는 역행 글 번호 동일할 시 답글 번호는 순서대로

SELECT ROWNUM RN, A.*
    FROM (SELECT * FROM BOARD ORDER BY REF DESC, RE_STEP) A; 
-- 2단계 로우넘으로 순서 a를 앨리아스를 줘서 복합쿼리문 실행

SELECT * FROM(SELECT ROWNUM RN, A.*
        FROM (SELECT * FROM BOARD ORDER BY REF DESC, RE_STEP) A)
    WHERE RN BETWEEN 11 AND 20 ; 
-- 3. 최종 TOP-N구문 2단계를 감싸고 RN의 수치를 정해줌으로서 특정 RN만 출력할 수 있도록 한다.

이 3단계 최종 쿼리를 DAO에 적용시키면 아래와 같다.

public ArrayList<BoardDto> listBoard(int startRow, int endRow) {
		ArrayList<BoardDto> dtos = new ArrayList<BoardDto>();
		Connection 		  conn = null;
		PreparedStatement		 pstmt = null;
		ResultSet 		                    rs = null;
		String sql = "SELECT * FROM(SELECT ROWNUM RN, A.* " + 
			"        FROM (SELECT * FROM BOARD ORDER BY REF DESC, RE_STEP) A) " + 
			"          WHERE RN BETWEEN ? AND ?";
		try {
			conn 	= getConnection();
			pstmt 	= conn.prepareStatement(sql);
			pstmt.setInt(1, startRow);
			pstmt.setInt(2, endRow);
			rs		= pstmt.executeQuery();
			while (rs.next()) {
				int num = rs.getInt("num");
				String writer 	= rs.getString("writer");
				String subject 	= rs.getString("subject");
				String content 	= rs.getString("content");
				String email 	= rs.getString("email");
				int readCount 	= rs.getInt("readCount");
				String pw		= rs.getString("pw");
				int ref 		= rs.getInt("ref");
				int reStep 		= rs.getInt("re_Step");
				int reIndent 	= rs.getInt("re_Indent");
				String ip 		= rs.getString("ip");
				Timestamp rdate = rs.getTimestamp("rdate");
				dtos.add(new BoardDto(num, writer, subject, content, email, readCount, pw, ref, reStep, reIndent, ip, rdate));
			}
		} catch (Exception e) {
			System.out.println(e.getMessage()+ "11");
		} finally {
			try {
				if(rs!=null) 	rs.close();
				if(pstmt!=null) pstmt.close();
				if(conn!=null) 	conn.close();
			} catch (Exception e) {
			System.out.println(e.getMessage()+ "22");
			}
		
		}
		return dtos;
	} 

위 DAO를 JSP에 접목시키기 위해선 아래와 같은 과정이 필요하다.

우선 자바 맨 위에 페이징을 하기 위해 한페이지에 몇개에 글이 올라갈지 밑에 블록은 몇개가 저장될 지 지정해둔다.

	final int PAGESIZE = 10, BLOCKSIZE = 10 ;
	페이지 사이즈는 한 페이지에 몇개의 글이 나올지 정한다. 
	블록사이즈는 페이지를 묶는 블록이 한 페이지에 몇 블록이 나올지 정한다.
	String pageNum = request.getParameter("pageNum");
	if (pageNum == null) {
		pageNum = "1"; // 전달받은 숫자 없으면 1페이지로
	}
	int currentPage = Integer.parseInt(pageNum);
	만일 해당 페이지가 1페이지이면
	int startRow = (currentPage-1) * PAGESIZE+1;
	처음 시작하는 1페이지면 1-1*10 = 0부터
	int endRow = startRow + PAGESIZE - 1;
	마지막에 끝나는 열은 시작페이지인 0에 10-1을 더해 9가 된다.
	따라서 1페이지에 나오는 글의 목록은 0~9까지 10개의 글이며
	2페이지에 나오는 글의 목록은 10~19까지 10개의 글이다.

또한 위 DAO를 바탕으로 아래 블록을 지정할 DIV파트는 아래와 같다.

<div class="paging">
	<%
	int pageCnt = (int)Math.ceil((double)totalCnt/ PAGESIZE); // 페이지 갯수 (다음 블록 여부 계산)
	int startPage = ((currentPage-1)/BLOCKSIZE * BLOCKSIZE +1 );
	int endPage = startPage + BLOCKSIZE -1;
	if (endPage > pageCnt) { // 페이지 수보다 엔드 페이지 값이 클 경우 페이지 수에 엔드 페이지를 맞춘다
		endPage = pageCnt;
	}
	if (startPage > BLOCKSIZE) { // 이전 블록이 있는지 여부 <a href="list.jsp=10">이전</a>
		out.println("[<a href='list.jsp?pageNum="+(startPage-1)+"'> 이전 </a>]");	
	}
	for(int i=startPage ; i <= endPage ; i++) {
		if (i==currentPage){ // 페이지 숫자만 출력 <b>사용
			out.println("[<b> "+ i +" </b>]");	
		} else { // a 태그를 포함한 페이지 수 출력
			out.println("[<a href='list.jsp?pageNum="+ i +"'> "+ i +" </a>]");	
		}
	}
	if ( endPage < pageCnt ){ // 다음 블록 있는지 여부
		out.println("[<a href='list.jsp?pageNum="+(endPage+1)+"'> 다음 </a>]");				
	}
	%>	
</div>

int pageCnt 값은 totalCnt값, 즉 지금까지 써온 모든 글의 카운트 값에 10을 나누고 해당하는 값을 ceil로 반올림 후 (int)를 통해 정수화 시킨다.
int startPage = ((currentPage-1)/BLOCKSIZE * BLOCKSIZE +1 ); 에서 현재 페이지가 1일 경우 0+1에서 1페이지
int endPage = startPage + BLOCKSIZE -1; 에서 1 + 10 - 1 로 10으로 출력된다.
따라서 1페이지에 나올 블록 값은 1~10까지 총 10개의 블록이 나오게 된다.

위 값이 모두 적용된 글 목록의 페이지는 아래와 같다.

글번호	작성자	글제목		메일			조회수
97	홍길동93	93번 제목입니다.	hong9393@hong.com	0
96	홍길동92	92번 제목입니다.	hong9292@hong.com	0
95	홍길동91	91번 제목입니다.	hong9191@hong.com	0
94	홍길동90	90번 제목입니다.	hong9090@hong.com	0
93	홍길동89	89번 제목입니다.	hong8989@hong.com	0
92	홍길동88	88번 제목입니다.	hong8888@hong.com	0
91	홍길동87	87번 제목입니다.	hong8787@hong.com	0
90	홍길동86	86번 제목입니다.	hong8686@hong.com	0
89	홍길동85	85번 제목입니다.	hong8585@hong.com	0
88	홍길동84	84번 제목입니다.	hong8484@hong.com	0

	[ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ 7 ] [ 8 ] [ 9 ] [ 10 ] [ 다음 ]




























